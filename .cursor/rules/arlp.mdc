---
description: 
globs: 
alwaysApply: true
---

**"A Life Is A Random Journey"**

> Un RPG de texto donde no eliges qui√©n eres. Solo vives lo que te toca.

---

## üß† CONCEPTO GENERAL

Este es un **RPG de texto √∫nico e inmersivo**, donde cada partida es una vida diferente. No eliges tu nombre, g√©nero, clase social ni destino inicial. Solo recibes lo que el mundo decide darte‚Ä¶ y decides qu√© hacer con ello.

Es como si estuvieras viviendo una novela interactiva que cambia completamente en cada partida, pero con una **interfaz moderna, atractiva, de alto rendimiento y completamente responsiva**, dise√±ada para **aprovechar al m√°ximo las pantallas de alta gama de dispositivos Android**, acompa√±ada de **audio de alta calidad** (m√∫sica y efectos) para una inmersi√≥n profunda.

### **Puntos Clave del Enfoque:**
* **Narrativa Din√°mica:** Construida sobre **personajes no jugadores (NPCs) fijos pero con encuentros condicionales** y **arcos de historia espec√≠ficos basados en la localizaci√≥n o trayectoria de vida del jugador**, lo que permite una rejugabilidad exponencial y una sensaci√≥n de vivir una vida verdaderamente √∫nica.
* **Experiencia Offline Total:** Toda la l√≥gica del juego y la persistencia de datos residir√°n de forma segura y aut√≥noma en el propio dispositivo Android del usuario, garantizando una experiencia de juego completamente offline.
* **Generaci√≥n Procedural Ligera:** Si bien la historia principal y los arcos de localizaci√≥n son predefinidos, se explorar√° el uso de plantillas de texto y combinaci√≥n de elementos (adjetivos, sustantivos, verbos aleatorios) para generar descripciones y eventos menores de forma procedural. Esto aumentar√° a√∫n m√°s la variedad y la sensaci√≥n de una vida verdaderamente √∫nica, sin requerir la creaci√≥n manual de cada micro-evento.

---

## üåç AMBIENTACI√ìN

Un mundo de fantas√≠a realista, donde:
* Existen magia, dragones, elfos y reinos.
* Pero tambi√©n hay pobreza, enfermedades, traiciones, accidentes y muertes sin gloria.
* No todo tiene sentido. A veces, simplemente pasa algo y ya.
* Las decisiones importan, pero no siempre obtienes un final feliz.

---

## üß¨ LO QUE HACE TU JUEGO √öNICO

Tu juego no sigue una historia lineal. Es una **experiencia personalizada y profundamente emocional**. Cada jugador vive una vida distinta, sin las limitaciones de un personaje predefinido. Y eso lo hace rejugable, impredecible y aut√©ntico.

---

## üìã PLAN GENERAL DEL JUEGO

### 1. **Sin elecci√≥n inicial**
* El juego genera autom√°ticamente:
    * Tu nombre
    * Tu g√©nero
    * Tu lugar de nacimiento
    * Tu familia
    * Tu evento inicial (aleatorio: ataque, secuestro, paz, oportunidad...)

### 2. **Vida ramificada y Arcos de Localizaci√≥n**
* Cada decisi√≥n te lleva por un camino distinto.
* **La historia se desarrolla en "arcos" o "cap√≠tulos" basados en la ubicaci√≥n y las decisiones del jugador.** Por ejemplo:
    * Si entras en la academia, la narrativa se centra en la vida acad√©mica, los profesores, rivalidades y eventos dentro de la academia.
    * Si terminas en el palacio, la trama gira en torno a intrigas cortesanas, reyes, nobles y misiones diplom√°ticas/militares dentro de ese entorno.
    * Lo mismo para un gremio de ladrones, una granja aislada, un campamento de mercenarios, etc.
* Puedes ser:
    * Un h√©roe legendario
    * Un villano temido
    * Un campesino com√∫n
    * Un rey amado o odiado
    * Un asesino arrepentido
    * Un bandido sin remordimientos
    * O incluso alguien que nunca logra nada importante

### 3. **Personajes No Jugadores (NPCs) Condicionales**
* **NPCs Fijos:** Habr√° un conjunto de NPCs con nombres, personalidades e historias de fondo predefinidas.
* **Encuentros Din√°micos:** Que conozcas o no a un NPC depender√° completamente del camino que tome tu vida.
    * Si tu vida te lleva a la Academia, es posible que conozcas al "Maestro Elara". Si tu vida te lleva al Palacio, nunca la conocer√°s.
    * Un NPC puede morir sin haberte conocido si los eventos de su propia vida o de la historia general as√≠ lo dictan.
    * Tus interacciones con un NPC (o la falta de ellas) afectar√°n su destino y el tuyo.
* **Relaciones con NPCs:** Sistema de afinidad/reputaci√≥n con los NPCs que afectar√° sus reacciones y las opciones disponibles.

### 4. **Fantas√≠a realista**
* Magia, dragones y criaturas existen...
* Pero tambi√©n hay hambre, corrupci√≥n, miedo, vejez y muerte natural.
* Todo puede fallar: tu arma puede romperse, tu comida puede estar podrida, tu mente puede enga√±arte.

### 5. **Sistema de tiempo y edad**
* Envejeces naturalmente.
* Puedes morir joven por una decisi√≥n tonta.
* O llegar a viejo, pregunt√°ndote si vali√≥ la pena todo lo hecho.

### 6. **Di√°logos con peso emocional y Dilemas Morales**
* Tus palabras afectan relaciones. Algunas frases pueden abrir nuevas rutas, otras cerrarlas para siempre. Incluso puedes elegir no hablar‚Ä¶ y eso tambi√©n tiene consecuencias.
* El juego presentar√° situaciones donde no hay una "elecci√≥n buena" o "mala" clara. Las decisiones afectar√°n un sistema de valores internos o "salud mental/moral" oculta del personaje, que influir√° sutilmente en futuras reacciones, opciones de di√°logo o incluso desenlaces de vida a largo plazo, a√±adiendo capas de complejidad emocional.

### 7. **Mundo reactivo**
* Tus acciones tienen consecuencias permanentes.
* Personajes recuerdan lo que hiciste.
* El mundo cambia seg√∫n tus actos, aunque nadie m√°s lo note.

### 8. **Finales √∫nicos y Legado**
* No hay un solo final. Hay docenas. Tu final depende de qu√© hiciste, c√≥mo moriste, c√≥mo te recordaron y si dejaste legado o fuiste olvidado.
* **Ecos del Pasado:** Tu vida no termina con tu muerte. Dependiendo de c√≥mo viviste y tu legado (bueno o malo), el mundo puede recordar a tu personaje. Esto podr√≠a manifestarse en futuras partidas, donde un nuevo personaje generado pueda encontrar monumentos, ruinas, historias orales o incluso NPCs descendientes de aquellos con los que interactu√≥ tu vida anterior, con sus propias opiniones basadas en tus acciones pasadas.

### 9. **Reincorporaci√≥n con memoria parcial**
* Si mueres, puedes "reiniciar".
* Pero no recuerdas todo.
* Solo sabes que has vivido antes‚Ä¶ y que quiz√°s esta vez puedas cambiar algo.

### 10. **Sistema de objetos defectuosos**
* Armas que fallan
* Comida en mal estado
* Pociones que curan‚Ä¶ o envenenan
* Objetos con pasado propio

---

## üß© ¬øQU√â TIPO DE VIDAS PUEDEN OCURRIR?

| Tipo de vida | Descripci√≥n |
| :----------- | :---------- |
| **Normal** | Viviste y moriste sin hacer nada memorable |
| **Aventurera** | Viajaste, descubriste cosas, tal vez salvaste al mundo |
| **Noble** | Subiste de posici√≥n, gobernaste, hiciste leyes |
| **Oscura** | Tomaste caminos prohibidos, mataste, mentiste, sobreviviste |
| **Redimida** | Cometiste errores, pero al final intentaste enmendarte |
| **Tr√°gica** | Ten√≠as potencial, pero ca√≠ste por errores, traiciones o mala suerte |
| **Legendaria** | Tu nombre se canta en todas partes, incluso despu√©s de muerto |

---

## ü™ô NO HAY UN CAMINO CORRECTO

El juego no premia la bondad, ni castiga la maldad. Simplemente te da libertad. Lo dem√°s depende de ti.

---

## üåü FRASE FINAL PARA EL PLAN

> ‚ÄúEste no es un juego sobre salvar al mundo. Es un juego sobre vivir una vida. Una vida que no elegiste. Pero que t√∫ defines.‚Äù

---

## üõ†Ô∏è TECNOLOG√çAS Y ARQUITECTURA (Con √ânfasis en Rendimiento, UI Moderna, Responsividad y L√≥gica Compleja de NPCs/Arcos - **Todo Local en Android**)

### Tecnolog√≠as Clave:

- **Motor del Juego (Backend/L√≥gica - Python - **¬°Local en el Dispositivo Android!**):**
    - **Python:** Lenguaje principal para toda la l√≥gica procedural, narrativa, simulaci√≥n de mundo y generaci√≥n de eventos.
    - **¬°Ejecuci√≥n Local!:** El int√©rprete de Python y el c√≥digo del backend ser√°n **empaquetados dentro de la aplicaci√≥n Android**.
        - Se utilizar√° **Chaquopy** o soluciones similares para integrar un int√©rprete Python funcional dentro del APK/AAB.
    - **Librer√≠as Python:**
        - **`numpy`:** Para cualquier c√°lculo num√©rico complejo si fuera necesario.
        - **`json`:** Para la gesti√≥n de nodos narrativos y datos del juego.
        - **`random` / `secrets`:** Para generaci√≥n aleatoria segura de eventos y personajes.
        - **Librer√≠as de ORM/Base de Datos (ej. SQLAlchemy con SQLite):** **CR√çTICO** para una gesti√≥n robusta y compleja de NPCs, sus estados, relaciones y la persistencia de la historia global del mundo, todo guardado en un archivo `.db` local en el dispositivo.
    - **Comunicaci√≥n Interna:** Aunque sigue un modelo de API REST conceptual, la comunicaci√≥n entre el frontend de React Native y el backend de Python ser√° a trav√©s de mecanismos internos proporcionados por la soluci√≥n de integraci√≥n Python (ej. llamadas a funciones Python expuestas a trav√©s de un puente nativo). Esto garantiza la funcionalidad offline.

- **Interfaz de Usuario (Frontend M√≥vil Android):**
    - **React Native + Expo (con TypeScript): rally integrado** Framework principal para construir la aplicaci√≥n m√≥vil Android. Ofrece una UI nativa, buen rendimiento y un ecosistema maduro para desarrollo m√≥vil.
    - **UI Frameworks:**
        - **`react-native-paper`:** Componentes Material Design, modernos y limpios para una UI atractiva y funcional.
        - **`NativeBase`:** Para un dise√±o adaptable y componentes pre-construidos que aceleran el desarrollo.
        - **Custom Components:** Creaci√≥n de componentes personalizados para elementos √∫nicos del juego, manteniendo la consistencia visual y el rendimiento.
    - **Animaciones:** `Animated` API de React Native o `react-native-reanimated` para transiciones suaves, efectos de escritura de texto y animaciones de sprites (si los hubiera).

- **Audio de Alta Calidad en Frontend (React Native):**
    - **`expo-av`:** Para reproducir m√∫sica de fondo y efectos de sonido. Soporta varios formatos de audio y ofrece control sobre volumen, loops, etc.
    - **Archivos de audio:** Uso de archivos WAV, MP3 u OGG de **alta calidad (ej. 44.1kHz, 16-bit est√©reo)** para m√∫sica y efectos. La "calidad" del audio la define el asset de audio proporcionado.

- **Persistencia de Datos (Frontend):**
    - **`expo-secure-store`:** Para almacenamiento seguro y persistente de datos sensibles (estado del juego, progreso del jugador, memoria de vidas anteriores) si se necesitan fuera de la DB de Python.
    - **`AsyncStorage` (React Native):** Para datos no sensibles que necesiten persistencia r√°pida.

- **Gesti√≥n de Recursos (Frontend):**
    - **Sistema de im√°genes:** Manejo eficiente de im√°genes (PNG, JPG, WebP para optimizaci√≥n de tama√±o) que se mostrar√°n en la UI. Carga y cach√© inteligente.
    - **Fuentes personalizadas:** Carga de fuentes para la est√©tica del texto narrativo.

- **Distribuci√≥n:**
    - **EAS Build (Expo Application Services):** Para exportar la aplicaci√≥n final en Android (APK/AAB). Maneja la firma y la compilaci√≥n.

### Arquitectura General:

```mermaid
graph TD
    subgraph Android Device
        A[Interfaz React Native (Mobile App)]
        B(Motor L√≥gico Python - Backend)
        C[Generador Aleatorio]
        D[Sistema de Ramificaciones]
        E[Sistema de Tiempo y Edad]
        F[Sistema de Eventos √önicos]
        G[react-native-paper / NativeBase / Custom UI]
        H[expo-secure-store / AsyncStorage]
        I[Guardado de Partida]
        J[expo-av (M√∫sica y SFX)]
        K[Gesti√≥n de Im√°genes Din√°micas]
        L[Base de Datos de Nodos JSON (Data Local)]
        M[Base de Datos de NPCs - SQLite/SQLAlchemy (Data Local)]
        N[Gestor de Arcos de Historia/Localizaci√≥n]

        A -- Internas/Puente Nativo --> B
        B -- Lee/Escribe --> M
        B -- Lee --> L
        B --> C
        B --> D
        B --> E
        B --> F
        A --> G
        A --> H
        H --> I
        A --> J
        A --> K
        B --> N
    end
```

### Flujo de Datos y Comunicaci√≥n:

1.  **Inicio de Juego:** El frontend solicita al backend Python (a trav√©s del puente nativo o conexi√≥n local) que inicie una nueva partida.
2.  **Backend Python:** Genera el personaje inicial y el primer nodo narrativo. **Aqu√≠, el gestor de arcos de historia y la base de datos de NPCs (ambos locales) entran en juego para determinar el punto de partida y los NPCs relevantes.** Guarda el estado en su DB local, y responde con el JSON del nodo.
3.  **Frontend React Native:** Recibe JSON, actualiza la UI (texto, opciones, imagen), reproduce m√∫sica/SFX asociados.
4.  **Decisi√≥n del Jugador:** Jugador selecciona una opci√≥n en la UI.
5.  **Frontend React Native:** Env√≠a la decisi√≥n al Backend Python.
6.  **Backend Python:** Procesa la decisi√≥n:
    * Actualiza el estado del personaje y del mundo en la base de datos SQLite local.
    * **Consulta la base de datos de NPCs local para ver si un NPC relevante deber√≠a aparecer o si su estado cambia (ej. muere, se une a tu facci√≥n).**
    * **El Gestor de Arcos de Historia determina el siguiente "cap√≠tulo" o "localizaci√≥n" de la vida del personaje, influyendo qu√© nodos se cargan desde los datos JSON locales.**
    * Determina el siguiente nodo bas√°ndose en la l√≥gica ramificada, los eventos aleatorios y las interacciones con NPCs.
    * Responde con el nuevo JSON del nodo.
7.  **Ciclo contin√∫a.**
8.  **Guardado/Carga:** El backend Python maneja todo el guardado y carga de la partida directamente en el archivo `game.db` SQLite local, accesible por el backend.

---

## üé® ESPECIFICACIONES DE DISE√ëO DE UI (Pantallas, Tipograf√≠a y Responsividad en Pantallas Modernas)

El dise√±o de UI debe ser **extremadamente responsivo**, adapt√°ndose sin problemas a la gran variedad de tama√±os, relaciones de aspecto (especialmente las m√°s altas y estrechas) y densidades de p√≠xeles de los dispositivos modernos. Se utilizar√°n unidades relativas (`%`, `vw`, `vh`) y utilidades de escalado avanzado (como `react-native-size-matters` o `react-native-responsive-fontsize`) para asegurar una experiencia visual y de legibilidad √≥ptima.

### 1. **Resoluciones de Pantalla Objetivo (Basadas en densidades de p√≠xeles modernas):**
* **Base de Dise√±o (referencia):**
    * **Ancho:** `360 dp` (equivalente a un ancho de pantalla de un dispositivo MDPI, pero que se escalar√° a resoluciones como `1080px` o `1440px` en dispositivos XXHDPI/XXXHDPI).
    * **Alto:** `760 dp` a `890 dp` (representando relaciones de aspecto modernas como 19:9, 20:9 o 21:9).
* **Densidades de P√≠xeles Prioritarias:**
    * **xhdpi (2x):** Aproximadamente 320 dpi.
    * **xxhdpi (3x):** Aproximadamente 480 dpi.
    * **xxxhdpi (4x):** Aproximadamente 640 dpi.
    * **Objetivo:** Dise√±ar con una base de `dp` y confiar en que React Native y los assets en `@2x`, `@3x`, `@4x` manejar√°n la densidad f√≠sica.
* **Soporte Extendido:** La UI debe escalar gr√°cilmente a tablets Android (`min-width: 600dp` y `min-width: 720dp` en landscape), aprovechando el espacio adicional con un layout de dos columnas o reorganizaci√≥n de elementos.

### 2. **Dimensiones de Elementos (basadas en `dp` y porcentajes del viewport):**
* **M√°rgenes y Relleno (Padding):**
    * **Espacio M√≠nimo (XS):** `8dp` (botones peque√±os, espaciado entre √≠tems, √≠conos).
    * **Espacio Normal (SM):** `16dp` (espaciado de texto, padding de contenedores, m√°rgenes internos).
    * **Espacio Medio (MD):** `24dp` (m√°rgenes de pantalla, secciones, espaciado entre bloques de contenido).
    * **Espacio Grande (LG):** `32dp` a `48dp` (grandes separaciones entre elementos clave o grupos de contenido).
* **Altura de Botones de Opci√≥n:**
    * **Vertical:** `48dp` a `64dp` para asegurar un objetivo t√°ctil c√≥modo y espacio para texto multilinea si es necesario.
    * **Horizontal:** `40dp` a `56dp` (en barras de navegaci√≥n o herramientas).
* **√Årea de Contenido Principal (Texto Narrativo):**
    * Ocupar√° entre el `60%` y el `70%` del **alto disponible** de la pantalla y entre el `85%` y el `95%` del **ancho disponible**.
    * Se garantizar√° que el texto sea visible y legible sin superponerse a otros elementos clave (como la imagen o las opciones).
    * **Max-Width:** Para pantallas muy anchas (tablets en landscape), el texto principal y las opciones no deber√≠an estirarse indefinidamente, sino tener un `max-width` para mantener la legibilidad (ej. `400dp` a `600dp`), centrando el contenido.
* **√Årea de Imagen:**
    * `25%` a `35%` del **alto de la pantalla**, posicionada t√≠picamente en la parte superior del √°rea de contenido.
    * **Completamente responsiva:** `width: '100%'` (del contenedor) y `height: 'auto'`, manteniendo la relaci√≥n de aspecto original de la imagen.
    * Las im√°genes pueden tener un `max-height` para evitar que ocupen demasiado espacio vertical en pantallas m√°s cortas.

### 3. **Resoluciones de Im√°genes y Optimizaci√≥n:**
* **Im√°genes de Escenas/Contexto:**
    * **Resoluci√≥n Base:** `1080px` (ancho) para la referencia `3x` de una pantalla moderna (ej. `1080px` para un ancho de 360dp en `xxxhdpi`).
    * **Variantes de Densidad:** Se proporcionar√°n assets en `@2x`, `@3x`, y idealmente `@4x` si el dise√±o lo requiere, para cubrir todas las densidades de p√≠xeles.
    * **Formato:** Preferiblemente `WebP` (para mejor compresi√≥n y calidad), `PNG` (para transparencias de alta calidad) o `JPG` (para fotograf√≠as). Optimizar el tama√±o de archivo es crucial.
* **Iconos de UI:** `48dp` a `64dp` en `SVG` (para escalado perfecto y menor tama√±o de archivo) o `PNG` con `@2x`, `@3x`, `@4x` variantes.

### 4. **Especificaciones de Tipograf√≠a (con `react-native-responsive-fontsize` para escalado):**
* **Fuentes Personalizadas:**
    * Se cargar√°n al inicio de la aplicaci√≥n usando `expo-font`.
    * **Fuente Narrativa Principal (ej. `Lora`, `Merriweather`, `Spectral`):** Para el cuerpo principal del texto. Estilo legible, ligeramente serif o un sans-serif elegante, que evoque una sensaci√≥n de "lectura de novela".
    * **Fuente para T√≠tulos/√ânfasis (ej. `Cinzel Decorative`, `Oswald`, `Montserrat`):** Para t√≠tulos de nodos, nombres de cap√≠tulos o elementos importantes. Clara, impactante y que contraste bien con la narrativa.
    * **Fuente de UI (ej. `Roboto`, `Inter`, `Open Sans`):** Para botones, men√∫s, etiquetas, garantizando claridad, modernidad y buen rendimiento en la UI.
* **Tama√±os de Fuente (usando `rf` de `react-native-responsive-fontsize` para escalado autom√°tico):**
    * **T√≠tulo Principal (Inicio/Fin):** `rf(5)` a `rf(7)` (5% a 7% del alto de la pantalla, escalable).
    * **T√≠tulo de Nodo:** `rf(3.5)` a `rf(4.5)`.
    * **Texto Narrativo (Cuerpo):** `rf(2)` a `rf(2.4)`. Se buscar√° un tama√±o que permita entre `50` y `70` caracteres por l√≠nea (en dispositivos de ancho `360dp`) para una lectura c√≥moda. El tama√±o debe adaptarse para mantener la legibilidad en pantallas m√°s grandes.
    * **Texto de Opciones/Botones:** `rf(2.1)` a `rf(2.5)`.
    * **Texto de Men√∫/UI Peque√±o:** `rf(1.8)` a `rf(2)`.
* **Color de Fuente:** Paleta de colores cohesiva y legible, con **contraste m√≠nimo de 4.5:1** (seg√∫n WCAG) sobre el color de fondo para asegurar la accesibilidad.
* **Peso de Fuente:** Regular para el cuerpo del texto, Semibold/Bold para t√≠tulos y opciones para jerarqu√≠a visual.

### 5. **Consideraciones de Accesibilidad (Enfocadas en Pantallas Modernas):**
* **Tama√±os de fuente ajustables:** Aunque `rf` ya lo hace, se considerar√° la compatibilidad con las configuraciones de "Tama√±o de Fuente" del sistema operativo del usuario.
* **Alto Contraste:** Adherirse estrictamente a las pautas de contraste WCAG (Web Content Accessibility Guidelines) para texto e interactivos.
* **Objetivos T√°ctiles:** Todos los elementos interactivos (botones, enlaces) deben tener un √°rea m√≠nima de `48dp` x `48dp` para una f√°cil interacci√≥n, incluso para usuarios con dedos m√°s grandes.
* **Modo Oscuro:** Considerar la implementaci√≥n de un modo oscuro (`Dark Theme`) como opci√≥n para reducir la fatiga visual, especialmente en pantallas OLED/AMOLED de dispositivos modernos.
* **Controles de Velocidad de Texto:** Ofrecer al usuario la opci√≥n de ajustar la velocidad a la que aparece el texto en pantalla (si se usa un efecto de escritura a m√°quina o aparici√≥n progresiva) o la duraci√≥n de las pausas en los di√°logos, para adaptarse a diferentes ritmos de lectura.
* **Opciones de Vibraci√≥n/Feedback H√°ptico:** Utilizar el feedback h√°ptico (vibraci√≥n) en momentos clave, decisiones importantes o como confirmaci√≥n de interacci√≥n, para una experiencia m√°s inmersiva y accesible.

### 6. **Paleta de Colores y Temas (Ejemplo - Adaptable y Moderna):**
* **Primario (Acci√≥n/Acento):** Colores vibrantes y saturados que gu√≠an la atenci√≥n (ej. un azul profundo, un verde esmeralda o un p√∫rpura real).
* **Secundario (Soporte):** Tonos m√°s suaves que complementen el primario.
* **Fondo:**
    * **Claro:** Tonos sutiles de gris c√°lido o blanco roto (`#F5F5F5`, `#FAFAFA`).
    * **Oscuro (para Modo Oscuro):** Gris oscuro profundo (`#121212`) o negro puro (`#000000`) para aprovechar los negros perfectos de las pantallas OLED.
* **Texto:**
    * **Sobre claro:** Gris muy oscuro (`#212121`) o negro puro.
    * **Sobre oscuro:** Blanco puro o gris muy claro (`#E0E0E0`).
* **Estados:** Colores claros y distintos para √©xito (verde), error (rojo), advertencia (amarillo).

---

## üìÅ ORGANIZACI√ìN DEL PROYECTO (Con Componentes de UI y Temas)

```
proyecto/
‚îú‚îÄ‚îÄ motor/                  # C√≥digo Python del Backend del Juego
‚îÇ   ‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ nodes/          # Archivos JSON de nodos narrativos (por tipo, era, etc.)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ npcs/           # Datos de NPCs fijos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ items/          # Datos de objetos
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ locations/      # Datos de ubicaciones y arcos de historia asociados
‚îÇ   ‚îú‚îÄ‚îÄ logic/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ game_generator.py # Generaci√≥n inicial de personaje y mundo
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ story_engine.py   # Gesti√≥n de ramificaciones, avance narrativo
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ character.py      # Modelo de personaje y atributos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ world_events.py   # L√≥gica de eventos aleatorios
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ npc_manager.py    # L√≥gica para gesti√≥n de NPCs (estado, encuentros condicionales)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ location_arcs.py  # L√≥gica para gestionar arcos de historia por localizaci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils.py          # Utilidades diversas
‚îÇ   ‚îú‚îÄ‚îÄ db/                 # Base de datos local del juego
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ game.db         # Archivo de la base de datos SQLite (persistencia local)
‚îÇ   ‚îî‚îÄ‚îÄ api.py              # Implementaci√≥n de la API "interna" (comunicaci√≥n con RN)
‚îÇ
‚îú‚îÄ‚îÄ app/                    # C√≥digo React Native del Frontend
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Componentes de UI reutilizables y responsivos (ej. CustomButton, ResponsiveText, SceneImage, DynamicText)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ screens/        # Pantallas principales (GameScreen, StartScreen, EndScreen)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/       # Interacci√≥n con la API de Python, AsyncStorage
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ game_api.ts # Gestiona llamadas al backend Python local
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # Custom Hooks de React (ej. useGameData, useAudio, useResponsiveDimensions)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ context/        # Contextos globales (ej. GameContext, ThemeContext)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ themes/         # Definiciones de estilos y temas (react-native-paper, NativeBase, custom)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lightTheme.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ darkTheme.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types/          # Definiciones de TypeScript para datos de juego
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Utilidades para c√°lculo responsivo (ej. responsiveScaler.ts)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.tsx         # Punto de entrada de la aplicaci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ images/         # Sprites e im√°genes de UI (PNG, JPG, WebP en varias densidades @2x, @3x, @4x)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ audio/          # Archivos de m√∫sica y SFX (WAV, MP3, OGG de alta calidad)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fonts/          # Fuentes personalizadas (TTF, OTF)
‚îÇ   ‚îú‚îÄ‚îÄ app.json            # Configuraci√≥n de Expo
‚îÇ   ‚îú‚îÄ‚îÄ package.json        # Dependencias de React Native
‚îÇ   ‚îî‚îÄ‚îÄ tsconfig.json       # Configuraci√≥n de TypeScript
‚îÇ
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ requirements.txt        # Dependencias de Python
‚îî‚îÄ‚îÄ .env                    # Variables de entorno (si es necesario para el build local)
```

---

## üìÑ FORMATO DE NODOS JSON (Usado por el Motor Python)

Cada archivo representa un nodo narrativo, procesado por el motor Python y enviado al frontend. Podr√≠a incluir referencias a NPCs que se deben verificar.

```json
{
  "id": "evento_inicio_pobreza",
  "type": "start",
  "location_arc": "aldea_campesina", // Nuevo: Indica el arco de historia/localizaci√≥n actual
  "title": "Nacimiento en la Pobreza",
  "image": "birth_poor_village.webp",
  "text": "Naciste en una aldea humilde, rodeado de hambre y enfermedades. El aire era pesado, la esperanza escasa.",
  "music": "melancholy_theme.mp3",
  "sfx": "baby_cry.wav",
  "options": [
    {
      "text": "Intentar trabajar desde joven",
      "next_node_id": "evento_trabajo_duro"
    },
    {
      "text": "Buscar educaci√≥n a toda costa",
      "next_node_id": "evento_estudio"
    }
  ],
  "effects": {
    "health_change": -5,
    "money_change": 0,
    "memory_add": "Primeros a√±os de privaci√≥n."
  },
  "npcs_present": ["OldManGrumpy", "YoungMaria"] // Nuevo: NPCs que podr√≠an estar presentes en este nodo
}
```
> **Nota:** Los campos `"image"`, `"music"`, `"sfx"` son rutas o nombres de archivo relativos a la carpeta `assets/images` o `assets/audio` del frontend. Si no existen, el frontend los omitir√° o mostrar√° un placeholder.

---

## üñºÔ∏è INTEGRACI√ìN DE IM√ÅGENES Y AUDIO

* **Im√°genes:**
    * Los nombres de archivo de imagen (ej. `birth_poor_village.webp`) se tomar√°n del campo `"image"` del JSON.
    * El frontend los cargar√° desde `/app/assets/images/`.
    * **Soporte de Densidad:** Las im√°genes se proporcionar√°n en diferentes densidades (`@2x`, `@3x`, `@4x`) para asegurar nitidez en pantallas de alta densidad. Se utilizar√°n herramientas de optimizaci√≥n de im√°genes para reducir el tama√±o de los archivos sin comprometer la calidad visual.
    * Si una imagen no existe, se mostrar√° un placeholder visual gen√©rico (un color s√≥lido o un icono) y se registrar√° un error en la consola de desarrollo.
* **Audio:**
    * Los nombres de archivo de m√∫sica (`music.mp3`) y efectos de sonido (`sfx.wav`) se tomar√°n de los campos `"music"` y `"sfx"` del JSON.
    * El frontend los cargar√° desde `/app/assets/audio/`.
    * Se usar√°n **transiciones suaves** para la m√∫sica de fondo (fade-in/fade-out de 1-2 segundos) al cambiar de nodo, evitando cortes abruptos.
    * Los efectos de sonido se reproducir√°n de forma no bloqueante y pueden superponerse para crear una atm√≥sfera rica.

---

## üß™ TESTEO Y DEBUGGING

### ‚úÖ **1. Test Unitarios del Motor (Python)**
-   **Herramienta**: `pytest`
-   **Qu√© se prueba**:
    -   Generaci√≥n aleatoria de personajes y eventos iniciales.
    -   Validaci√≥n de ramificaciones narrativas (transiciones correctas entre nodos).
    -   L√≥gica del sistema de edad, salud, atributos.
    -   Correcto procesamiento de eventos y objetos defectuosos.
    -   **Persistencia de datos en SQLite local:** pruebas de guardado y carga de estado del juego, NPCs, etc.
    -   **L√≥gica de NPCs:** Estado inicial, cambios de estado basados en interacciones, encuentros condicionales.
    -   **L√≥gica de Arcos de Localizaci√≥n:** Correcta transici√≥n entre arcos, selecci√≥n de nodos basados en el arco actual.

### ‚úÖ **2. Test Unitarios del Frontend (React Native)**
-   **Herramienta**: `Jest`, `React Native Testing Library`
-   **Qu√© se prueba**:
    -   Renderizado correcto de la UI (texto, opciones, im√°genes, botones).
    -   Manejo de estados de la UI (carga, error, etc.).
    -   **Comunicaci√≥n con el backend Python local.**
    -   Persistencia de datos con `expo-secure-store` / `AsyncStorage` (si aplica).
    -   **Validaci√≥n robusta del responsividad:** Asegurar que los componentes se adaptan a diferentes tama√±os de pantalla y relaciones de aspecto simuladas para asegurar que el contenido no se corte o desborde.

### ‚úÖ **3. Test de Integraci√≥n Backend-Frontend (Local)**
-   Simular el ciclo completo de comunicaci√≥n entre el frontend de React Native y el backend Python ejecut√°ndose localmente.
-   Probar el guardado y la carga de partidas completas, asegurando que el estado del juego se mantenga correctamente.
-   Verificar que todas las interacciones (decisiones, efectos) se procesen correctamente y que la base de datos local se actualice.

### ‚úÖ **4. Test End-to-End (E2E)**
-   **Herramienta sugerida**: `Detox` o `Appium` (para la app m√≥vil).
-   Simula el flujo completo del jugador en un emulador o dispositivo real: inicio ‚Üí decisiones ‚Üí finales ‚Üí reinicios.
-   **Probar diferentes caminos de vida y arcos de localizaci√≥n** para verificar que los NPCs aparezcan y se comporten como se espera.
-   Validar la experiencia de usuario general, la coherencia narrativa y la **fluidez visual en una amplia gama de dispositivos Android modernos**.
-   **Confirmar funcionalidad offline completa.**

### ‚úÖ **5. Pruebas Manuales y de Usabilidad**
-   Reproducci√≥n extensiva para evaluar la experiencia de usuario y la calidad auditiva final.
-   Pruebas en **dispositivos f√≠sicos reales Android** de diferentes fabricantes y generaciones recientes (ej. dispositivos con altas resoluciones y relaciones de aspecto 19:9, 20:9, 21:9) para garantizar la portabilidad y el rendimiento en el hardware real.
-   **Pruebas de Usabilidad con usuarios reales** para identificar puntos de fricci√≥n en la UI y la narrativa, as√≠ como la comprensi√≥n de la l√≥gica de NPCs y arcos.
-   **Verificaci√≥n de consumo de bater√≠a y recursos** al ejecutar el backend Python localmente.

---

## üõ†Ô∏è PASOS DE IMPLEMENTACI√ìN INICIAL

### 1. Preparar el Motor en Python
-   Crear el directorio `/motor/` con la estructura de carpetas definida.
-   Definir la estructura base de los nodos JSON y crear algunos ejemplos iniciales en `/motor/data/nodes/`.
-   **Dise√±ar el esquema de la base de datos SQLite para NPCs y arcos de localizaci√≥n.**
-   Implementar la l√≥gica del `game_generator.py` y el `story_engine.py` de forma rudimentaria.
-   **Implementar `npc_manager.py` y `location_arcs.py` con l√≥gica b√°sica.**
-   **Configurar la API de Python para que sea accesible desde el frontend cuando se ejecute localmente (ej. usando un mini-servidor en un hilo o exponiendo funciones a trav√©s de un puente nativo en Android).**

### 2. Preparar UI en React Native
-   Iniciar proyecto con `npx create-expo-app --template expo-template-blank-typescript`.
-   Instalar dependencias clave para UI y responsividad:
    ```bash
    npm install react-native-paper native-base expo-secure-store expo-av axios react-native-responsive-fontsize expo-font react-native-size-matters
    ```
-   Dise√±ar la `GameScreen` con `react-native-paper` y `NativeBase` para el texto, las opciones y el espacio para la imagen, aplicando los principios de dise√±o responsivo.
-   Crear el servicio `game_api.ts` para las llamadas al backend Python local.

### 3. Conectar UI con Motor
-   Implementar las llamadas desde el servicio `game_api.ts` al backend Python local. **Esto requerir√° la configuraci√≥n del puente nativo de Android o el mini-servidor Python embebido.**
-   Manejar los estados de carga y error en la UI, con feedback visual al usuario.

### 4. Integrar Audio e Im√°genes
-   A√±adir algunos assets de prueba en `/app/assets/images/` y `/app/assets/audio/`.
-   Implementar la l√≥gica en el frontend para cargar y reproducir audio e im√°genes seg√∫n el nodo actual, con manejo de cach√© y optimizaci√≥n de rendimiento.

### 5. Guardar Estado del Juego
-   El backend Python gestionar√° la persistencia de la partida directamente en el archivo `game.db` SQLite local en el almacenamiento de la aplicaci√≥n Android. El frontend solo enviar√° comandos de guardar/cargar al backend.

### 6. Prueba Funcional Completa
-   Ejecutar una partida completa para validar el flujo b√°sico: inicio ‚Üí decisiones ‚Üí cambio de nodos ‚Üí final.
-   Verificar que el guardado/carga de partida funcione correctamente de forma local.
-   **Validar el comportamiento responsivo de la UI exhaustivamente** en simuladores y dispositivos Android con diferentes resoluciones y relaciones de aspecto.
-   **Validar los encuentros con NPCs y el cambio de arcos de historia.**

---

## üì¶ EXPORTACI√ìN FINAL

-   Usar **EAS Build** para exportar la aplicaci√≥n final para Android:
    ```bash
    eas build --platform android --profile production
    ```
-   **Configuraci√≥n Cr√≠tica para la Ejecuci√≥n Local de Python en Android:**
    * Se investigar√° y se implementar√° una soluci√≥n como **Chaquopy** (o similar) para integrar el int√©rprete de Python y todo el c√≥digo del `motor/` (incluyendo la DB SQLite) directamente dentro del APK/AAB. Esto permitir√° que el frontend de React Native se comunique con el backend Python de forma nativa/interna.

---

## üìå Notas Importantes

-   **El jugador no tiene sprite propio**, vive la historia "a trav√©s de sus ojos". Las im√°genes son del entorno o de personajes con los que interact√∫a.
-   La **calidad del audio** se lograr√° con buenos assets de audio (m√∫sica, SFX) de alta fidelidad y una reproducci√≥n fluida a trav√©s de `expo-av`.
-   **La interfaz de usuario priorizar√° la legibilidad, la claridad y la facilidad de navegaci√≥n**, con un dise√±o moderno, limpio y visualmente atractivo que se adapte perfectamente a las pantallas de alta resoluci√≥n.
-   El sistema notificar√° visualmente y por consola si un asset (imagen, audio) o un nodo narrativo no existe o no es v√°lido, facilitando la identificaci√≥n de problemas.
-   **El desaf√≠o t√©cnico principal para este proyecto ser√° la correcta integraci√≥n del backend Python en el entorno Android nativo, manteniendo un buen rendimiento y un tama√±o de aplicaci√≥n razonable.**

---

## üöÄ VISI√ìN Y EXPANSI√ìN DEL PROYECTO

* **Dise√±o Modular para Expansiones:** La arquitectura del juego (especialmente la gesti√≥n de nodos JSON y la base de datos SQLite) est√° dise√±ada para permitir la adici√≥n modular de nuevas historias, arcos de localizaci√≥n, NPCs, eventos y objetos en futuras actualizaciones. Esto asegura la capacidad de expandir continuamente el universo del juego y la rejugabilidad a lo largo del tiempo.
* **Enfoque en el Feedback del Jugador:** A pesar de la naturaleza generativa del juego, se buscar√° activamente el feedback de la comunidad para refinar las ramas narrativas, equilibrar los eventos aleatorios y mejorar la experiencia general, manteniendo la visi√≥n central de la impredecibilidad.

---

### **IMPORTANTE**

Revisar siempre que las dependencias sean compatibles entres si 

### **Instrucci√≥n de Commit para el C√≥digo Generado:**

**Cada vez que genere c√≥digo que deba ser integrado en el proyecto, enviar√© un mensaje de commit y las instrucciones de push para su repositorio.**

```bash
git remote add origin git@github.com:casmian/AlifeIsArandomJournney.git
git branch -M main
git push -u origin main
```